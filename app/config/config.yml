imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }

# Put parameters here that don't need to change on each machine where the app is deployed
# http://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: en

framework:
    #esi:             ~
    translator: { fallbacks: [en] }
    secret:          "%secret%"
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: ~
    form:            ~
    csrf_protection: ~
    validation:      { enable_annotations: true }
    #serializer:      { enable_annotations: true }
    templating:
        engines: ['twig']
    default_locale:  "%locale%"
    trusted_hosts:   ~
    trusted_proxies: ~
    session:
        # handler_id set to null will use default session handler from php.ini
        handler_id:  ~
    fragments:       ~
    http_method_override: true

# Twig Configuration
twig:
    debug:            "%kernel.debug%"
    strict_variables: "%kernel.debug%"

# Doctrine Configuration
doctrine:
    dbal:
        driver:   pdo_mysql
        host:     "%database_host%"
        port:     "%database_port%"
        dbname:   "%database_name%"
        user:     "%database_user%"
        password: "%database_password%"
        charset:  UTF8
        # if using pdo_sqlite as your database driver:
        #   1. add the path in parameters.yml
        #     e.g. database_path: "%kernel.root_dir%/data/data.db3"
        #   2. Uncomment database_path in parameters.yml.dist
        #   3. Uncomment next line:
        #     path:     "%database_path%"
        types:
            json:     Sonata\Doctrine\Types\JsonType

    orm:
        auto_generate_proxy_classes: "%kernel.debug%"
        naming_strategy: doctrine.orm.naming_strategy.underscore
        auto_mapping: true

        # The mappings to import the FOSMessage entities
        mappings:
            fos_message:
                type: annotation
                dir: %kernel.root_dir%/../vendor/friendsofsymfony/message/src/Driver/Doctrine/ORM/Entity
                prefix: FOS\Message\Driver\Doctrine\ORM\Entity

        # User your user entity instead of the PersonInterface
        resolve_target_entities:
            FOS\Message\Model\PersonInterface: AppBundle\Entity\User

# Swiftmailer Configuration
swiftmailer:
    transport: "%mailer_transport%"
    host:      "%mailer_host%"
    username:  "%mailer_user%"
    password:  "%mailer_password%"
    spool:     { type: memory }

fos_rest:
    param_fetcher_listener: true
    body_listener: true
    format_listener:
        enabled: true
        rules:
            - { path: '^/admin', priorities: ['html', 'xhtml']}
            - { path: '^/login', priorities: ['html', 'xhtml']}
            - { path: '^/profile', priorities: ['html', 'xhtml']}
            - { path: '^/register', priorities: ['html', 'xhtml']}
            - { path: '^/', priorities: ['json', 'xml']}
    routing_loader:
        default_format: json
        include_format: false
    view:
        view_response_listener: force
    body_converter:
        enabled: true
        validate: true

fos_user:
    db_driver: orm
    firewall_name: api
    user_class: AppBundle\Entity\User
    group:
        group_class: AppBundle\Entity\Group
        group_manager: sonata.user.orm.group_manager
    service:
        user_manager: sonata.user.orm.user_manager


fos_oauth_server:
    db_driver: orm
    client_class: PoweredByMoe\ApiBundle\Entity\Client
    access_token_class: PoweredByMoe\ApiBundle\Entity\AccessToken
    refresh_token_class: PoweredByMoe\ApiBundle\Entity\RefreshToken
    auth_code_class: PoweredByMoe\ApiBundle\Entity\AuthCode
    service:
        user_provider: fos_user.user_manager

doctrine_migrations:
    dir_name: "%kernel.root_dir%/DoctrineMigrations"
    namespace: Application\Migrations
    table_name: migrations
    name: Application Migrations

fr3d_ldap:
    driver:
        host:                     "%ldap_driver_host%"
        port:                     "%ldap_driver_port%"
        username:                 "%ldap_driver_username%"
        password:                 "%ldap_driver_password%"
        bindRequiresDn:           "%ldap_driver_bind_requires_dn%"
        baseDn:                   "%ldap_driver_base_dn%"
        accountDomainName:        "%ldap_driver_account_domain_name%"
        accountDomainNameShort:   "%ldap_driver_account_domain_name_short%"
    user:
        baseDn: "%ldap_user_base_dn%"
        filter: "%ldap_user_filter%"
        usernameAttribute: "%ldap_user_username_attribute%"
        attributes:
            - { ldap_attr: samaccount, user_method: setUsername }

al_swagger_ui:
    static_resources:
        resource_dir: app/Resources/swagger-docs
        resource_list_filename:  api-docs.json
    resource_list: al_swagger_ui_static_resource_list



sonata_block:
    default_contexts: [cms]
    blocks:
        # enable the SonataAdminBundle block
        sonata.admin.block.admin_list:
            contexts: [admin]

        sonata.user.block.menu:    # used to display the menu in profile pages
        sonata.user.block.account: # used to display menu option (login option)
        sonata.block.service.text:
        sonata.block.service.rss:

sonata_media:
    # if you don't use default namespace configuration
    #class:
    #    media: MyVendor\MediaBundle\Entity\Media
    #    gallery: MyVendor\MediaBundle\Entity\Gallery
    #    gallery_has_media: MyVendor\MediaBundle\Entity\GalleryHasMedia
    default_context: default
    db_driver: doctrine_orm # or doctrine_mongodb, doctrine_phpcr
    contexts:
        default:  # the default context is mandatory
            providers:
                - sonata.media.provider.dailymotion
                - sonata.media.provider.youtube
                - sonata.media.provider.image
                - sonata.media.provider.file

            formats:
                small: { width: 100 , quality: 70}
                big:   { width: 500 , quality: 70}

    cdn:
        server:
            path: /uploads/media # http://media.sonata-project.org/

    filesystem:
        local:
            directory:  %kernel.root_dir%/../web/uploads/media
            create:     false

    providers:
        image:
            resizer: sonata.media.resizer.square

sonata_user:
    class:
        user: AppBundle\Entity\User
        group: AppBundle\Entity\Group

sonata_news:
    title:        PoweredBy.MOE Portal
    link:         http://portal.poweredby.moe
    description:  Get Moe
    salt:         'unsecureToken'
    permalink_generator: sonata.news.permalink.date # sonata.news.permalink.category

    comment:
        notification:
            emails:   [news.notifications@needsmore.moe]
            from:     no-reply@needsmore.moe
            template: 'SonataNewsBundle:Mail:comment_notification.txt.twig'

sonata_formatter:
    formatters:
        markdown:
            service: sonata.formatter.text.markdown
            extensions:
                - sonata.formatter.twig.control_flow
                - sonata.formatter.twig.gist
                - sonata.media.formatter.twig

        text:
            service: sonata.formatter.text.text
            extensions:
                - sonata.formatter.twig.control_flow
                - sonata.formatter.twig.gist
                - sonata.media.formatter.twig

        rawhtml:
            service: sonata.formatter.text.raw
            extensions:
                - sonata.formatter.twig.control_flow
                - sonata.formatter.twig.gist
                - sonata.media.formatter.twig

        richhtml:
            service: sonata.formatter.text.raw
            extensions:
                - sonata.formatter.twig.control_flow
                - sonata.formatter.twig.gist
                - sonata.media.formatter.twig

sonata_notification:
    backend: sonata.notification.backend.runtime
    # backend: sonata.notification.backend.rabbitmq
    admin:
        enabled: true

sensio_framework_extra:
    view:    { annotations: false }
    router:  { annotations: true }
    request: { converters: true }

twig:
    exception_controller: 'FOS\RestBundle\Controller\ExceptionController::showAction'

sonata_seo:
    encoding:         UTF-8
    page:
        title:            PoweredBy.MOE Portal
        default:          sonata.seo.page.default
        metas:
            name:
                keywords:             moe userportal oauth
                description:          PoweredBy.MOE allows you to use one account for multiple sires and services
                robots:               index, follow

            property:
                # Facebook application settings
                #'fb:app_id':          XXXXXX
                #'fb:admins':          admin1, admin2

                # Open Graph information
                # see http://developers.facebook.com/docs/opengraphprotocol/#types or http://ogp.me/
                'og:site_name':       PoweredBy.MOE Portal
                'og:description':     A demo of the some rich bundles for your Symfony2 projects

            http-equiv:
                'Content-Type':         text/html; charset=utf-8
                #'X-Ua-Compatible':      IE=EmulateIE7

            charset:
                UTF-8:    ''

        head:
            'xmlns':              http://www.w3.org/1999/xhtml
            'xmlns:og':           http://opengraphprotocol.org/schema/
            #'xmlns:fb':           "http://www.facebook.com/2008/fbml"

sonata_page:
    multisite: host
    use_streamed_response: true # set the value to false in debug mode or if the reverse proxy does not handle streamed response
    ignore_route_patterns:
        - ^(.*)admin(.*)   # ignore admin route, ie route containing 'admin'
        - ^(.*)api(.*)
        - ^_(.*)          # ignore symfony routes

    ignore_routes:
        - sonata_page_esi_cache
        - sonata_page_ssi_cache
        - sonata_page_js_sync_cache
        - sonata_page_js_async_cache
        - sonata_cache_esi
        - sonata_cache_ssi
        - sonata_cache_js_async
        - sonata_cache_js_sync
        - sonata_cache_apc

    ignore_uri_patterns:
        - ^/admin\/   # ignore admin route, ie route containing 'admin'
        - ^/api\/

    page_defaults:
        homepage: {decorate: false} # disable decoration for homepage, key - is a page route

    default_template: default # template key from templates section, used as default for pages
    templates:
        default: {path: 'SonataPageBundle::layout.html.twig', name: default }

    # manage the http errors
    catch_exceptions:
        not_found: [404]    # render 404 page with "not_found" key (name generated: _page_internal_error_{key})
        fatal:     [500]    # so you can use the same page for different http errors or specify specific page for each error